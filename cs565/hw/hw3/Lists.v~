Require Export Induction.

Module NatList.

  Inductive natprod : Type :=
    pair : nat -> nat -> natprod.

  Definition fst (p : natprod) :=
    match p with
      | pair x y => x
    end.
  Definition snd (p : natprod) :=
    match p with
      | pair x y => y
    end.

  Notation "( x , y )" := (pair x y).

  Definition fst' (p : natprod) :=
    match p with
      | (x, y) => x
    end.

  Definition snd' (p : natprod) :=
    match p with
      | (x, y) => y
    end.

  Definition swap_pair (p : natprod) :=
    match p with
      | (x, y) => (y, x)
    end.

  Theorem surjective_pairing' : forall (n m : nat),
                                  (n,m) = (fst (n,m), snd (n,m)).
  Proof. reflexivity. Qed.

  Theorem surjective_pairing_stuck : forall (p : natprod),
                                       p = (fst p, snd p).
  Proof. intros p. destruct p as [n m]. reflexivity. Qed.

  Theorem snd_fst_is_swap : forall (p : natprod),
                              (snd p, fst p) = swap_pair p.
  Proof. intros p. destruct p as [n m]. reflexivity. Qed.

  Theorem fst_swap_is_snd : forall (p : natprod),
                              fst (swap_pair p) = snd p.
  Proof. intros p. destruct p as [n m]. reflexivity. Qed.

  (* tree *)
  Inductive nattree : Type :=
  | Leaf : nattree
  | Node : nat -> nattree -> nattree -> nattree.

  Inductive natlist : Type :=
  | nil : natlist
  | cons : nat -> natlist -> natlist.

  Notation "x :: l" := (cons x l) (at level 60, right associativity).
  Notation "[ ]" := nil.
  Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) ..).

  Eval compute in (nil).
  Eval compute in [ ].
  Eval compute in (1 + 2 :: nil).
  Eval compute in (1 + 2 :: [ ]).
  Eval compute in [1;2;3].
  
  
  Fixpoint repeat (n count : nat) : natlist :=
    match count with
      | O => nil
      | S count' => n :: (repeat n count')
    end.

  Fixpoint length (l:natlist) : nat :=
    match l with
      | nil => O
      | h :: t => S (length t)
    end.

  Fixpoint app (l1 l2 : natlist) : natlist :=
    match l1 with
      | nil => l2
      | h :: t => cons h (app t l2)
    end.

  Notation "x ++ y" := (app x y)
                         (right associativity, at level 60).

  Example test_app1: [1;2;3] ++ [4;5] = [1;2;3;4;5].
  Proof. reflexivity. Qed.
  Example test_app2: nil ++ [4;5] = [4;5].
  Proof. reflexivity. Qed.
  Example test_app3: [1;2;3] ++ nil = [1;2;3].
  Proof. reflexivity. Qed.

  Definition hd (default:nat) (l:natlist) : nat :=
    match l with
      | nil => default
      | h :: t => h
    end.

  Definition tl (l:natlist) : natlist :=
    match l with
      | nil => nil
      | h :: t => t
    end.

  Example test_hd1: hd 0 [1;2;3] = 1.
  Proof. reflexivity. Qed.
  Example test_hd2: hd 0 [] = 0.
  Proof. reflexivity. Qed.
  Example test_tl: tl [1;2;3] = [2;3].
  Proof. reflexivity. Qed.

  Fixpoint nonzeros (l:natlist) : natlist :=
    match l with
      | nil => nil
      | h :: t => match h with
                    | O => nonzeros t
                    | S _ => cons h (nonzeros t)
                  end
    end.

  Example test_nonzeros: nonzeros [0;1;0;2;3;0;0] = [1;2;3].
  Proof. reflexivity. Qed.


  Fixpoint oddmembers (l:natlist) : natlist :=
    match l with
      | nil => nil
      | h :: t => match oddb(h) with
                    | true => cons h (oddmembers t)
                    | false => oddmembers t
                  end
    end.
  
  Example test_oddmembers: oddmembers [0;1;0;2;3;0;0] = [1;3].
  Proof. reflexivity. Qed.

  Fixpoint countoddmembers (l:natlist) : nat :=
    match l with
      | nil => 0
      | h :: t => match oddb(h) with
                    | true => S (countoddmembers t)
                    | false => countoddmembers t
                  end
    end.

  Example test_countoddmembers1: countoddmembers [1;0;3;1;4;5] = 4.
  Proof. reflexivity. Qed.

  Example test_countoddmembers2: countoddmembers [0;2;4] = 0.
  Proof. reflexivity. Qed.

  Example test_countoddmembers3: countoddmembers nil = 0.
  Proof. reflexivity. Qed.

  Definition bag := natlist.

  Fixpoint count (v:nat) (s:bag) : nat :=
    match s with
      | nil => 0
      | h :: t => match (beq_nat v h) with
                    | true => S (count v t)
                    | false => count v t
                  end
    end.

  Example test_count1: count 1 [1;2;3;1;4;1] = 3.
  Proof. reflexivity. Qed.

  Example test_count2: count 6 [1;2;3;1;4;1] = 0.
  Proof. reflexivity. Qed.

  Definition sum : bag -> bag -> bag := app.

  Example test_sum1: count 1 (sum [1;2;3] [1;4;1]) = 3.
  Proof. reflexivity. Qed.

  Definition add (v:nat) (s:bag) : bag := cons v s.
  
  Example test_add1: count 1 (add 1 [1;4;1]) = 3.
  Proof. reflexivity. Qed.
  Example test_add2: count 5 (add 1 [1;4;1]) = 0.
  Proof. reflexivity. Qed.

  Definition member (v:nat) (s:bag) : bool := negb (beq_nat 0 (count v s)).
  Example test_member1: member 1 [1;4;1] = true.
  Proof. reflexivity. Qed.
  Example test_member2: member 2 [1;4;1] = false.
  Proof. reflexivity. Qed.

  Fixpoint remove_one (v:nat) (s:bag) : bag :=
    match s with
      | nil => nil
      | h :: t => match (beq_nat h v) with
                    | true => t
                    | false => h :: (remove_one v t)
                  end
    end.
  Example test_remove_one1: count 5 (remove_one 5 [2;1;5;4;1]) = 0.
  Proof. reflexivity. Qed.
  Example test_remove_one2: count 5 (remove_one 5 [2;1;4;1]) = 0.
  Proof. reflexivity. Qed.
  Example test_remove_one3: count 4 (remove_one 5 [2;1;4;5;1;4]) = 2.
  Proof. reflexivity. Qed.
  Example test_remove_one4: count 5 (remove_one 5 [2;1;5;4;5;1;4]) = 1.
  Proof. reflexivity. Qed.

  Fixpoint remove_all (v:nat) (s:bag) : bag :=
    match s with
      | nil => nil
      | h :: t => match (beq_nat h v) with
                    | true => remove_all v t
                    | false => h :: (remove_all v t)
                  end
    end.
  Example test_remove_all1: count 5 (remove_all 5 [2;1;5;4;1]) = 0.
  Proof. reflexivity. Qed.
  Example test_remove_all2: count 5 (remove_all 5 [2;1;4;1]) = 0.
  Proof. reflexivity. Qed.
  Example test_remove_all3: count 4 (remove_all 5 [2;1;4;5;1;4]) = 2.
  Proof. reflexivity. Qed.
  Example test_remove_all4: count 5 (remove_all 5 [2;1;5;4;5;1;4;5;1;4]) = 0.
  Proof. reflexivity. Qed.

  Fixpoint subset (s1:bag) (s2:bag) : bool :=
    match s1 with
      | nil => true
      | h :: t => match (member h s2) with
                    | true => subset t (remove_one h s2)
                    | false => false
                  end
    end.
  Example test_subset1: subset [1;2] [2;1;4;1] = true.
  Proof. reflexivity. Qed.
  Example test_subset2: subset [1;2;2] [2;1;4;1] = false.
  Proof. reflexivity. Qed.

  Theorem bag_theorem : forall (n h : nat) (s : bag),
                          beq_nat n h = true ->
                          S (count n s) = count n (h :: s).
  Proof.
    intros n h s H.
    simpl. rewrite -> H. reflexivity.
  Qed.

  Theorem nil_app : forall (l:natlist),
                      [] ++ l = l.
  Proof. reflexivity. Qed.

  Theorem tl_length_pred : forall (l:natlist),
                           pred (length l) = length (tl l).
  Proof.
    intros l. destruct l as [| h l'].
    Case "l = nil". reflexivity.
    Case "l = h :: l'". reflexivity.
  Qed.

  Theorem app_assoc : forall l1 l2 l3 : natlist,
                        (l1 ++ l2) ++ l3 = l1 ++ (l2 ++ l3).
  Proof.
    intros l1 l2 l3. induction l1 as [| h l1'].
    Case "l1 = nil". reflexivity.
    Case "l1 = h :: l1'". simpl. rewrite -> IHl1'. reflexivity.
  Qed.

  Fixpoint beq_natlist (l1 l2 : natlist) : bool :=
    match l1, l2 with
      | nil, nil => true
      | nil, _ => false
      | _, nil => false
      | x :: xs, y :: ys => match (beq_nat x y) with
                              | true => beq_natlist xs ys
                              | false => false
                            end
    end.
  
  Example test_beq_natlist1 : (beq_natlist nil nil = true).
  Proof. reflexivity. Qed.
  Example test_beq_natlist2 : beq_natlist [1;2;3] [1;2;3] = true.
  Proof. reflexivity. Qed.
  Example test_beq_natlist3 : beq_natlist [1;2;3] [1;2;4] = false.
  Proof. reflexivity. Qed.

  Theorem beq_natlist_refl : forall l : natlist,
                       true = beq_natlist l l.
  Proof.
    intros l. induction l as [| h l'].
    Case "l = nil". reflexivity.
    Case "l = h :: l'". simpl. rewrite <- beq_nat_refl. rewrite <- IHl'. reflexivity.
  Qed.

  